We decompiled the bonus2 binary to understand how it works.

The main function takes two arguments

It uses strncpy to copy up to:
	- 40 bytes from argv[1] into local_60
	- 32 bytes from argv[2] into acStack_38

Then it checks the value of the environment variable LANG.
	- If it starts with "fi", it sets language = 1.
	- If it starts with "nl", it sets language = 2.
	- Otherwise, language remains 0.

Inside greetuser(), the program builds a greeting string using strcat.
The beginning of the greeting depends on the value of language.
The vulnerability lies in the fact that the second parameter of strcat is our input and there is no bound check.
But it will only work when LANG=fi (or language = 1) because no \0 is added after the first string.

The first argument is going to be the shellcode + 19 of padding to fill the first buffer with 40 bytes.
Because we filled the buffer with strncpy (n = 40), we don't put the \0 at the end of it.
So the buffer of argv[2] who is store just next to, will be shared with the buffer of argv[1].

The second argument is 18 of padding and then the address where the strcpy (when the language is fi) is writting.

Strcat is going to concatenate the string created in greetUser for the finish language (that does not have a \0) and the buffer where argv[1] + argv[2] are stored.

./bonus2 $(python -c 'print "\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80" + "\x90" * 19') $(python -c 'print "A" * 18 + "\xb0\xf6\xff\xbf"')