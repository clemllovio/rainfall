We decompiled the level9 binary to understand how it works.

We found that two C++ objects are created from the same `class` N.
The first object receives user input through a method called setAnnotation.
The second object later calls a `virtual` method, taking the first object as argument.

The method setAnnotation uses memcpy to copy our input into the memory of the first object.
The copy starts at this + 4, and the object is only 108 bytes in size.
There is no check on the size of the input, so we can overflow past the intended memory region.
This allows us to overwrite the vtable pointer, of this, stored at the very beginning of the object.

We use setAnnotation to overwrite the vtable pointer with an address we control.
We are going to replace the address of the vtable by the address where the memcpy is writting.
We replace the address in the vtable with the address where memcpy is writing .

./level9 $(python -c 'print "\x10\xa0\x04\x08" + "\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80" + "A" * 83 + "\x0c\xa0\x04\x08"')

Our input is made off :
	- The address where the memcpy is writting plus 4;
	- A shellcode;
	- Some padding to fill up the 108 bytes;
	- The address of our fake vtable.
