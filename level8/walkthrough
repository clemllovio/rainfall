We decompiled the level8 binary and found that it processes user input in a loop. 

It supports four main commands:
	- auth <input> : allocates 4 bytes for the global auth pointer and optionally copies some data
	- reset : frees auth
	- service <input> : sets the global service pointer using strdup
	- login : checks if a value at auth + 0x20 is non-zero and opens a shell if it is

Each time, the program prints the current address of the auth and service pointers.

When we type auth + a space, the program does:
	- malloc(4) → allocates only 4 bytes and stores the pointer in auth
	- Initializes the 4 bytes at auth to 0
	- If your input is less than 31 bytes, it does: `strcpy(auth, local_8b);`
Even though only 4 bytes were allocated, strcpy will happily overflow if you enter more data.
This lets you overflow auth’s small buffer and corrupt memory right after it on the heap.

After allocating 4 bytes for auth, the next memory allocation will returns a block that is placed right after the one allocated by auth. 
Due to how the heap is managed, the string copied by strdup when we call service ends up stored around auth + 0x20

./level8
auth 
service BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBb
login