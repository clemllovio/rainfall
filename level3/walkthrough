We started by decompiling the level3 program to understand how it works.
In the main function, we see that it calls another function named v().

Inside the v() function, there is a call to fgets, which reads user input.
After that, the input is printed with printf, and then there is a condition that checks
the value of a global variable called m.

If m equals 64, the program calls system("/bin/sh"), giving us a shell as the level4 user.

Our goal is to make m == 64. But since m is a global variable and we can't change its
value directly. By using printf with the %n format specifier and with the address of m as
part of the input, it  will write the number of characters printed so far into an address
we provide.

So the plan is, to put the address of m in our input, Add padding so that we print 
exactly 64 characters and use %n to write 64 into m.

To do that we are first going to use gdb to find the address of m (`info variables`)
Then, we set a breakpoint at the printf call to analyze the stack. After hitting the
breakpoint, we use : `x/100x $sp`. This lets us see where our input appears on the
stack, and how many arguments to skip to reach the %n.

Now we have all the information to build the final command:
`(python -c 'print "\x8c\x98\x04\x08" + "A" * 60 + "%4$n"' ; echo "cat /home/user level4/.pass") | ./level3`