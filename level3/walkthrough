We started by decompiling the level3 program to understand how it works.
In the main function, we see that it calls another function named v().

Inside the v() function, there is a call to fgets, which reads user input.
After that, the input is printed with printf, and then there is a condition that checks the value of a global variable called m.

If m equals 64 (0x40), the program calls system("/bin/sh"), giving us a shell as the level4 user.

Our goal is to make m equal to 64. 
We can do this by using the %n format specifier in printf. 
When %n is used with an address we provide, it writes the number of bytes printed so far into that address.

So the plan is, to put the address of m in our printf, add padding so that we print 
exactly 64 characters and use %n to write that value into m.

To do that we are first going to use gdb to find the address of m (`info variables`)
Then, we set a breakpoint at the printf call to analyze the stack. 
After hitting the breakpoint, we run : `x/100x $sp`.
This allow us to find where our input appears on the stack and determine how many format arguments to skip before reaching our address.

Now we have all the information to build the final command:
`(python -c 'print "\x8c\x98\x04\x08" + "A" * 60 + "%4$n"' ; echo "cat /home/user/level4/.pass") | ./level3`